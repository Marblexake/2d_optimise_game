1.    GameObject mouse, rabbit, panda
    - One image break down into 3 sprites, use sprite sheet

2.    gameHeight & gameWidth cache together into a game object. 
	  Reference // https://docs.unity3d.com/ScriptReference/Caching.html

3.    GameObject.Find() ; Cache the sprites into a public game object

4.    GameObject newFrame = ___ ; 

5.    GetChild(0).gameObject functions;  - is expensive.

6.    int numChildren = top.transform.childCount; children count same, doesn't need to constantly update.

7.    Objects[] prefabs = _____ ; Bring it outside the loop and store it into a fixed		variable so that it doesn't require constantly be called out.

8)	Line 177 Don't create new object, reuse the same object and change the sprite
	if we reuse the GameObject, line 188 and 189 is unneccessary
	198 - 203: Once again unneccesary if we reuse GAmeObject


9) Line 213 you should nnever use hardcoded variables, they are only for testing and	  stuff (Refactoring code)


10) Loop at line 224 might be unneccesary if we are reusing the GameObject.


11) Never use "Find" in a loop. Line 297 can be removed and replaced somewhere else.


12) Loop at line 306, cache the GetComponenets. Cache meaning keeping a reference to them rather than constantly finding them each time we need them. 
   "New" is creating memory, new is unneccesary here. (New Vector3)


13) GetDistanceToNeighbour all variables can be cached as usual.


14) Raycasting is expensive and unneccesary. Line 345


15) Line 365 to 376 Refactoring can be possible here. "Once a frame has been found, you can break out of the loop aka early exit."


16) CheckRespawnFrames() a great place for object pooling. Line 396 cache(?)


17) 407 to 409 cache(?)


18) Reuse frames, don't destroy. Reuse frames, don't destroy. OBJECT POOLING!!


19) We can take all code and functions relating to the Frame Object, and put them into the frame gameObject in the scene. (Create a new script for this)


20) RotateSprite() optimise the loops, the calls can easily go up to 1000 times.


21) Line 483 and 484 can potentially called millions of times, and it's even the "find" function.


22) UpdateTime() is only for the UI. What can we do: Chuck all UI stuff onto the a new script. Or we can write this with a Coroutines (aka Timer)
	UpdateScore() can also be dumped into a coroutine.

23) Cache the audio, every time you play the sound, you are creating a new Object.

24) RotateSprites can be refactored into a new script be on the sprite gameObject itself.
	Line 565


25) Line 592 and 592, we should never hardcode the values. For example, in this, if there isn't a child the entire code could crash because of it.


26) FrameToDelete loop may be unncessary, and once again it should cached otherwise.


27) Line 644 we can cached the ParticleSystem and reuse it. We can just play and pause the particle system.


28)  Line 646 There is no need to constantly find mousePos here 


29) Line 661 and 663 can be reused, as mentioed in 27 and 28


30) Line 675 Mathf.PingPong we can put all this in an array and call/iterate through it rather than create a new Time variable each time we update.

